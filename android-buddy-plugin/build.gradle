apply plugin: 'java-gradle-plugin'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'kotlin-kapt'
apply plugin: "com.github.gmazzo.buildconfig"

ext {
    tools_dependency_name = 'android-buddy-tools'
}

dependencies {
    implementation project(":$tools_dependency_name")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "io.github.classgraph:classgraph:4.8.87"
    compileOnly "com.android.tools.build:gradle:$androidBuild_version"
    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.auto.value:auto-value:$autoValue_version"
    annotationProcessor "com.google.auto.value:auto-value:$autoValue_version"
    testImplementation "com.android.tools.build:gradle:$androidBuild_version"
    testImplementation "com.likethesalad.tools.testing:android-gradle:$testingUtilities_version"
    testImplementation "com.likethesalad.tools.testing:unit-testing:$testingUtilities_version"
    testImplementation "net.lingala.zip4j:zip4j:2.9.1"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def metadataPropertiesId = "${rootProject.group}_${name}"

pluginUnderTestMetadata {
    pluginClasspath.from(configurations.compileOnly)
}

buildConfig {
    packageName("${metadataPropertiesId.replaceAll("-", ".")}.generated")

    buildConfigField("String", "BYTE_BUDDY_VERSION", "\"$byteBuddy_version\"")
    buildConfigField(
            "String",
            "ANDROID_BUDDY_TOOLS_URI",
            "\"${rootProject.group}:$tools_dependency_name:${rootProject.version}\""
    )
}

sourceSets {
    functionalTest {
        java {
            srcDir file('src/functionalTest/java')
        }
        resources {
            srcDir file('src/functionalTest/resources')
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

gradlePlugin {
    plugins {
        androidBuddy {
            id = 'com.likethesalad.android-buddy'
            implementationClass = 'com.likethesalad.android.buddy.AndroidBuddyPlugin'
        }
        androidBuddyLibrary {
            id = 'com.likethesalad.android-buddy-library'
            implementationClass = 'com.likethesalad.android.buddylib.AndroidBuddyLibraryPlugin'
        }
    }
}

kapt {
    correctErrorTypes = true
}